@using CommunicationApp.Extensions;
@model CategoryViewModel
@{
    ViewData["Title"] = "Lägg till kategori";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>@ViewData["Title"]</h1>
<hr />
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger fade in show">
        <button type="button" class="close close-alert" data-dismiss="alert" aria-hidden="true">×</button>
        @Model.ErrorMessage
    </div>
}
<div id="errorMessage"></div>
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Type" class="control-label"></label>
                @{
                    var selectList = Enum.GetValues(typeof(BlogType))
                        .Cast<BlogType>()
                        .Where(e => e != BlogType.Research && e != BlogType.Education)
                        .Select(e => new SelectListItem
                        {
                            Value = ((int)e).ToString(),
                            Text = e.GetDisplayName()
                        });
                }
                <select asp-for="@Model.Type" asp-items="@selectList" class="custom-select"></select>
                <span asp-validation-for="Type" class="text-danger"></span>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Lägg till <i class="far fa-folder-open"></i></button>
            </div>
        </form>
    </div>
</div>
<div>
    <a asp-action="Index">Visa kategorier</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}