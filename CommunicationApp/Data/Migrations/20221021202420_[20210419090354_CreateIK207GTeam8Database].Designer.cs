// <auto-generated />
using System;
using CommunicationApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunicationApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221021202420_[20210419090354_CreateIK207GTeam8Database]")]
    partial class _20210419090354_CreateIK207GTeam8Database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.Property<Guid>("BlogPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogPostsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BlogPostCategory");
                });

            modelBuilder.Entity("CategoryPerson", b =>
                {
                    b.Property<Guid>("CategoryAccessListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryAccessListId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("CategoryPerson");
                });

            modelBuilder.Entity("CommunicationApp.Models.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BlogType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4af51ec2-9ada-43b7-ad16-ba2d7c506d55"),
                            BlogType = 3,
                            DateEdited = new DateTime(2021, 4, 21, 13, 46, 0, 0, DateTimeKind.Unspecified),
                            DatePublished = new DateTime(2021, 4, 21, 13, 46, 0, 0, DateTimeKind.Unspecified),
                            Text = "Text...",
                            Title = "Rubrik"
                        },
                        new
                        {
                            Id = new Guid("b712906a-a519-4c36-b1f8-3a8c62281edb"),
                            BlogType = 0,
                            DateEdited = new DateTime(2021, 4, 19, 13, 46, 0, 0, DateTimeKind.Unspecified),
                            DatePublished = new DateTime(2021, 4, 19, 13, 46, 0, 0, DateTimeKind.Unspecified),
                            Text = "Tack alla för en riktigt underbar AW i helgen! Detta får vi allt göra om. 🍻",
                            Title = "Helgens AW"
                        });
                });

            modelBuilder.Entity("CommunicationApp.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4d5c8c5-880e-4fad-80e3-5a5888f1f3a8"),
                            Name = "AfterWork",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("05405ec8-cda9-485c-a342-5c3d0ca9bef0"),
                            Name = "Resor",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("661a5d18-bde6-4c94-b153-5a3497b90303"),
                            Name = "Nya kurser",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("864b9d02-1b18-4e50-8792-7f048ca8e9d6"),
                            Name = "Information gällande Covid-19",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("6ab3f87a-1f1d-4584-9247-4a770687c1b1"),
                            Name = "VT2022-IK207G",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("3f9303bd-f62a-4ba1-9104-c2c883af89c7"),
                            Name = "HT2021-IK201G",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("79067b6d-c268-4924-a05b-df499a0f8a86"),
                            Name = "Informatik",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("c1bbdf6f-33b5-4439-84ce-e325c58c20a8"),
                            Name = "Datavetenskap",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("a7c18d0b-0e21-4d02-9997-9bd76ce01c3b"),
                            Name = "Användning av IT i verksamhetskontexter",
                            Type = 3
                        });
                });

            modelBuilder.Entity("CommunicationApp.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogPostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CommunicationApp.Models.FileUpload", b =>
                {
                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Url");

                    b.HasIndex("BlogPostId");

                    b.ToTable("FileUpload");
                });

            modelBuilder.Entity("CommunicationApp.Models.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FinalDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FinalDateId");

                    b.HasIndex("HostId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5eb847e2-a67d-48ab-aa4f-772a408c3d1f"),
                            Description = "Denna dagen kör vi så det ryker! Vi ska allt se till att bli klara med detta projektet nu!",
                            Subject = "Parprogrammering"
                        },
                        new
                        {
                            Id = new Guid("ac61c8af-79cf-4138-88ba-2ba9974a33fd"),
                            Description = "Vi kör en genomgång tillsamman om vad detta skrum är för något.",
                            Subject = "Scrum information"
                        },
                        new
                        {
                            Id = new Guid("a97d0734-654e-4179-88c5-ebfb120dcf10"),
                            Description = "Oj, så roligt vi ska ha!",
                            Subject = "Programmering tillsammans!"
                        });
                });

            modelBuilder.Entity("CommunicationApp.Models.MeetingDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ceff100-fdf8-4fa0-8381-ae41e4c05450"),
                            End = new DateTime(2021, 5, 4, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 5, 4, 12, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f5b53f49-a606-4794-9f18-b44b00ea2dc9"),
                            End = new DateTime(2021, 5, 15, 16, 15, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 5, 15, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2e52bfb3-dc39-446b-84dc-33ccc44641ac"),
                            End = new DateTime(2021, 5, 20, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 5, 20, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MeetingDatePerson", b =>
                {
                    b.Property<string>("AttendeesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MeetingDateRequestsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttendeesId", "MeetingDateRequestsId");

                    b.HasIndex("MeetingDateRequestsId");

                    b.ToTable("MeetingDatePerson");
                });

            modelBuilder.Entity("MeetingPerson", b =>
                {
                    b.Property<Guid>("MeetingRequestsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MeetingRequestsId", "RecipientsId");

                    b.HasIndex("RecipientsId");

                    b.ToTable("MeetingPerson");
                });

            modelBuilder.Entity("MeetingPerson1", b =>
                {
                    b.Property<string>("NonAttendersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("NotAttendingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NonAttendersId", "NotAttendingId");

                    b.HasIndex("NotAttendingId");

                    b.ToTable("MeetingPerson1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CommunicationApp.Models.Person", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Subscriber")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Person");

                    b.HasData(
                        new
                        {
                            Id = "75849fb1-b846-49dd-9b04-8f6065c9d93f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b24963d4-4e12-4415-8223-ba2723cd8e42",
                            Email = "user1@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user1@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAECR+SkIEqfIrhKd19gDjON0ff8Zw3Lqk+HgPpQS241c/YNsaiG2NXeKF7PQ8utq2Ng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e06e880-3a61-4194-abc0-02b4b352f3ea",
                            TwoFactorEnabled = false,
                            UserName = "user1@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "1",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "8503dc61-5c8e-4b27-a239-28ffd5847bf4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01ea7603-69a8-42f9-b1f6-87588d3e9197",
                            Email = "user2@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user2@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEEfGf+ddJIZKv7XIV1wJ5zdfk2vr1WGpB7i2tmAPfYRGQuNNXHq1rfz/kbcQegi2hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98a62292-9843-410d-933b-d65d009e8ccd",
                            TwoFactorEnabled = false,
                            UserName = "user2@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "2",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "3f187431-2dee-46b8-a559-fcb5736077e0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d085aea8-a60d-4d3c-9409-791f983d97d6",
                            Email = "user3@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user3@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJyH70DGM9fBOsyR59C9i0BEIoeHDS4/K5MICM0SMsFRtoCKIdO0HK2X4cxFLIzaJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29e3379f-4b56-40ba-a68d-116610da4123",
                            TwoFactorEnabled = false,
                            UserName = "user3@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "3",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "4ab11aa9-37d8-4aba-a327-19e3ce92a3fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d051fb11-1082-4a0b-9dd3-4cb82afc3c0b",
                            Email = "user4@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user4@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEEdwtA4xAPbE3lIFPfjtvSffknfENwPzEMlzCabmzSF6PJsO2c1dxY0f/3BYl+Tk6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe860642-42b3-4305-8da6-3a4a180e3580",
                            TwoFactorEnabled = false,
                            UserName = "user4@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "4",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "67fd83b5-2cae-4eb2-9d43-f68df08d4734",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "581d6f51-5ab1-46d7-87af-46f236a48395",
                            Email = "user5@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user5@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEPDOMtSqvSA5nYt6ljP9uRD6OLpsXGh1tp2BhDC2EV1wumkgBN5ZInAigZUpASy1uQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddb8c866-3397-4fa4-b5c6-065954df5cdb",
                            TwoFactorEnabled = false,
                            UserName = "user5@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "5",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "2a4fe8fa-c827-48a8-b4d7-3bba23b06548",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84105bb0-c050-4d8e-b0ea-248b68c156dc",
                            Email = "user6@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user6@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOTx9UEtO8jKU1rh2YiLwfIeuOzpeoaITxn0NDrEmp1SGtVN/j6wx9KvObYJbAnd6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9e0efaa-6129-4895-b0b4-0dde3b864743",
                            TwoFactorEnabled = false,
                            UserName = "user6@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "6",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "5b6dcf7b-f128-4aed-8c63-8192833639a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c06a465b-0928-4620-adaf-9bf360aaab39",
                            Email = "user7@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user7@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFfPEUhGTcSJKO7OQIOgoetskDnriezW14TcYYZMOVfWp2kIpF873G6nl//aMDNTgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1aa05827-932e-40a3-9478-2050e97a1bd1",
                            TwoFactorEnabled = false,
                            UserName = "user7@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "7",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "f69707cb-d000-4907-866c-52c6060e702e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0be89e9-df17-44fb-96b0-c171d67f2d3a",
                            Email = "user8@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user8@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEHwxXJnB/PrwsU4D0ywvt0Q66VAzZ1XTeYzHBu4Iz5v9hzvCJBzj2WIwQShL9AlGXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d2eccd9-d640-44c4-8c8e-4994a0090b50",
                            TwoFactorEnabled = false,
                            UserName = "user8@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "8",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "b4c4a7dc-9d4f-41bd-b9e9-9f4744ba7a51",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "709017bb-55ca-40e9-b3fe-e8aca6906d24",
                            Email = "user9@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user9@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEIt7rHW6H1IwQ/bP3ecW8mkjqfZFKfqGLQEIX53wNcwL/JV+Fa02C/vL8+E9OCBHWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84257111-474e-4b13-8f71-a2074e1ffbf7",
                            TwoFactorEnabled = false,
                            UserName = "user9@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "9",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "c3599de8-dbfd-4b9e-9120-3a19d3ca53b4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41fdf692-6532-45ff-9843-7826200be3bc",
                            Email = "user10@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user10@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFTxROfdvtsVwhaoilpLxMths24egR1L94Z0rEdG36SWcA9AmYsOiOFxwlQFL2Io9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95bbeded-1275-4f51-a564-d7773692c81c",
                            TwoFactorEnabled = false,
                            UserName = "user10@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "10",
                            Subscriber = false
                        });
                });

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.HasOne("CommunicationApp.Models.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryPerson", b =>
                {
                    b.HasOne("CommunicationApp.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryAccessListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunicationApp.Models.BlogPost", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CommunicationApp.Models.Category", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", "Creator")
                        .WithMany("CategoryCreations")
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CommunicationApp.Models.Comment", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId");

                    b.HasOne("CommunicationApp.Models.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId");

                    b.Navigation("Author");

                    b.Navigation("BlogPost");
                });

            modelBuilder.Entity("CommunicationApp.Models.FileUpload", b =>
                {
                    b.HasOne("CommunicationApp.Models.BlogPost", null)
                        .WithMany("Files")
                        .HasForeignKey("BlogPostId");
                });

            modelBuilder.Entity("CommunicationApp.Models.Meeting", b =>
                {
                    b.HasOne("CommunicationApp.Models.MeetingDate", "FinalDate")
                        .WithMany()
                        .HasForeignKey("FinalDateId");

                    b.HasOne("CommunicationApp.Models.Person", "Host")
                        .WithMany("HostMeetings")
                        .HasForeignKey("HostId");

                    b.Navigation("FinalDate");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("CommunicationApp.Models.MeetingDate", b =>
                {
                    b.HasOne("CommunicationApp.Models.Meeting", null)
                        .WithMany("DateRequests")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("MeetingDatePerson", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("AttendeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.MeetingDate", null)
                        .WithMany()
                        .HasForeignKey("MeetingDateRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingPerson", b =>
                {
                    b.HasOne("CommunicationApp.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("MeetingRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("RecipientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingPerson1", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("NonAttendersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("NotAttendingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunicationApp.Models.BlogPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("CommunicationApp.Models.Meeting", b =>
                {
                    b.Navigation("DateRequests");
                });

            modelBuilder.Entity("CommunicationApp.Models.Person", b =>
                {
                    b.Navigation("CategoryCreations");

                    b.Navigation("Comments");

                    b.Navigation("HostMeetings");
                });
#pragma warning restore 612, 618
        }
    }
}
