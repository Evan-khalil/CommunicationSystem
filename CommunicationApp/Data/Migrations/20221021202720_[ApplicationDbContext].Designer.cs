// <auto-generated />
using System;
using CommunicationApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunicationApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221021202720_[ApplicationDbContext]")]
    partial class ApplicationDbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.Property<Guid>("BlogPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogPostsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BlogPostCategory");
                });

            modelBuilder.Entity("CategoryPerson", b =>
                {
                    b.Property<Guid>("CategoryAccessListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryAccessListId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("CategoryPerson");
                });

            modelBuilder.Entity("CommunicationApp.Models.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BlogType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d767fee-760d-43e3-a4c6-3f11d6fdd983"),
                            BlogType = 3,
                            DateEdited = new DateTime(2021, 4, 21, 13, 46, 0, 0, DateTimeKind.Unspecified),
                            DatePublished = new DateTime(2021, 4, 21, 13, 46, 0, 0, DateTimeKind.Unspecified),
                            Text = "Text...",
                            Title = "Rubrik"
                        },
                        new
                        {
                            Id = new Guid("a87585b2-6752-467e-ae9f-9d78a8580982"),
                            BlogType = 0,
                            DateEdited = new DateTime(2021, 4, 19, 13, 46, 0, 0, DateTimeKind.Unspecified),
                            DatePublished = new DateTime(2021, 4, 19, 13, 46, 0, 0, DateTimeKind.Unspecified),
                            Text = "Tack alla för en riktigt underbar AW i helgen! Detta får vi allt göra om. 🍻",
                            Title = "Helgens AW"
                        });
                });

            modelBuilder.Entity("CommunicationApp.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("697b5d41-f9de-4cca-8197-8872d11d572a"),
                            Name = "AfterWork",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("44da6fdd-428e-4450-9804-bd3867c10bd0"),
                            Name = "Resor",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("8d301dc7-8c14-4655-b389-346ff46016a9"),
                            Name = "Nya kurser",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("8fe4bd84-cdfb-42a1-89da-cf8d8efbb772"),
                            Name = "Information gällande Covid-19",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("b5d404b9-e031-40ce-8286-b2cbfafcb75a"),
                            Name = "VT2022-IK207G",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("e89697a7-b87f-4fe0-a92f-1f89cfb1542a"),
                            Name = "HT2021-IK201G",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("1a85e9f6-0d9a-4dfa-8d7c-19465d426f9f"),
                            Name = "Informatik",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("f08b5d86-a628-4bb7-82c3-5ef8b2e1c666"),
                            Name = "Datavetenskap",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("5f5e58ac-78d9-4df9-a97a-d1c561d56cab"),
                            Name = "Användning av IT i verksamhetskontexter",
                            Type = 3
                        });
                });

            modelBuilder.Entity("CommunicationApp.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogPostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CommunicationApp.Models.FileUpload", b =>
                {
                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Url");

                    b.HasIndex("BlogPostId");

                    b.ToTable("FileUpload");
                });

            modelBuilder.Entity("CommunicationApp.Models.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FinalDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FinalDateId");

                    b.HasIndex("HostId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57277503-c868-45e2-aca9-13f4ed93ed14"),
                            Description = "Denna dagen kör vi så det ryker! Vi ska allt se till att bli klara med detta projektet nu!",
                            Subject = "Parprogrammering"
                        },
                        new
                        {
                            Id = new Guid("d74f451b-c9b4-4b11-b58f-a547fc89d96c"),
                            Description = "Vi kör en genomgång tillsamman om vad detta skrum är för något.",
                            Subject = "Scrum information"
                        },
                        new
                        {
                            Id = new Guid("b4df8725-a6f0-45f8-a4b1-848be2b31209"),
                            Description = "Oj, så roligt vi ska ha!",
                            Subject = "Programmering tillsammans!"
                        });
                });

            modelBuilder.Entity("CommunicationApp.Models.MeetingDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab3990b6-c4b1-4a06-a497-0db69a513760"),
                            End = new DateTime(2021, 5, 4, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 5, 4, 12, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7f95a22c-f091-408d-af44-2817be3643d8"),
                            End = new DateTime(2021, 5, 15, 16, 15, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 5, 15, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("34a6dbb6-7e5a-4c53-8e32-74082be1c12c"),
                            End = new DateTime(2021, 5, 20, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 5, 20, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MeetingDatePerson", b =>
                {
                    b.Property<string>("AttendeesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MeetingDateRequestsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttendeesId", "MeetingDateRequestsId");

                    b.HasIndex("MeetingDateRequestsId");

                    b.ToTable("MeetingDatePerson");
                });

            modelBuilder.Entity("MeetingPerson", b =>
                {
                    b.Property<Guid>("MeetingRequestsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MeetingRequestsId", "RecipientsId");

                    b.HasIndex("RecipientsId");

                    b.ToTable("MeetingPerson");
                });

            modelBuilder.Entity("MeetingPerson1", b =>
                {
                    b.Property<string>("NonAttendersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("NotAttendingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NonAttendersId", "NotAttendingId");

                    b.HasIndex("NotAttendingId");

                    b.ToTable("MeetingPerson1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CommunicationApp.Models.Person", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Subscriber")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Person");

                    b.HasData(
                        new
                        {
                            Id = "a0dbf17d-65d0-4f61-9168-a5fe7c5d2296",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2aab45e1-3051-4669-bf3e-c205a1473f75",
                            Email = "user1@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user1@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAENr6gRwTdnKWc4nbrydg990iP2EbNJHAgTPrLJdVI2oJ3l18XegR+PGtIGGdAOSAKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b238c92-2fd8-4224-812e-d969135ccc89",
                            TwoFactorEnabled = false,
                            UserName = "user1@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "1",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "cf6a7409-7149-4422-977b-d38aa3a03197",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21890633-92f3-4e4f-aabf-91c45b6d82d9",
                            Email = "user2@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user2@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAECt7JTm9ntDZsk8CKlfr/4yONMm6qjIJQn/vK5VfHxlsN3Kdn3iFKQr/uPA+ORMSrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c56e5149-a9ba-4269-91f2-8e7de3ad080b",
                            TwoFactorEnabled = false,
                            UserName = "user2@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "2",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "bfc4c47b-1517-4be3-a5f5-d0bacf699909",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b8c79d9-02f2-4033-976b-c3f878b51ce1",
                            Email = "user3@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user3@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEM5wShWWW9BSTwxyjcnwyWVII/wl+Lcp/K73RsJWSWcZFwkoFWdxe5nR/Wu3FCupZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48eb4792-d16d-4dfa-987b-6d50ab9bf524",
                            TwoFactorEnabled = false,
                            UserName = "user3@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "3",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "41d78fa5-9650-426e-95f8-252e6ffc108c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9158dd94-1412-465f-9225-f67fb9509781",
                            Email = "user4@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user4@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOx9oirlE/tku43haIX3VbCu/VZNrVQd3YEA88ef0QKWVTwV4O5v+/21zb16FdnBSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b484860d-a994-48b8-9fbd-e5a5865738c9",
                            TwoFactorEnabled = false,
                            UserName = "user4@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "4",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "d8ec9b2a-edcd-433e-8ecb-edee10e2ed8b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc002be4-d559-43f1-bfbc-052a1d9f439f",
                            Email = "user5@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user5@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEBexCWJ0c86SMjBaD2xRvUha6ftrofLwTzC4b5R4f2T3h/UG5vy4K5zugQyMSQOjmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4dee980d-f5d3-4a7c-ae4a-58a628d8c23a",
                            TwoFactorEnabled = false,
                            UserName = "user5@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "5",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "21445020-6f4a-4a38-99b2-21892e6cc5fb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0af49405-d357-4b37-9e44-6d033126dbba",
                            Email = "user6@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user6@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAENlTrraurqL35fXOWLbIH3UNbUa5KB3+nKfPx9EHB5Ghv/RpnNQIK9dTwTA1AZvrPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "156080a3-5200-4bbd-a78d-75d5f3f8a53c",
                            TwoFactorEnabled = false,
                            UserName = "user6@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "6",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "4985540b-eac3-40c8-94ff-020051f2b808",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9619e01-3578-4664-87af-918cffed0df1",
                            Email = "user7@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user7@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAkBF1qjgQ90DnJQjA35C6k1pMF1gB6Vf48Iq+kWtUnBmkoQa22vhCpzuG4MLJmGIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56a83bc7-d664-4425-8de8-d5b029cc5b11",
                            TwoFactorEnabled = false,
                            UserName = "user7@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "7",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "8d860640-1ff0-45cc-9596-bc82493c4a1a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8803042a-c605-4f6c-8724-2d781cbdd246",
                            Email = "user8@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user8@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEBvdwiva9F2wYsHx3jQldfsZEH0RKLHsGWVUy5+SP0TbyfGIvWADAPYGd6O9G4o5XA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ffb7d06-7afe-4faf-ad4d-acfb9bbedef6",
                            TwoFactorEnabled = false,
                            UserName = "user8@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "8",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "ec399df9-5709-462d-b978-97a9026d8b57",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61628662-90bb-4405-ae60-01e471fd58ce",
                            Email = "user9@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user9@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEChGCcepFlxpQco4TYeyWJWLhUvn+g9IqxhRSQveWGYf771cCt9Y6l1wrNg2YxH4Qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3568e99d-4372-4e1e-a477-a57981edeeb9",
                            TwoFactorEnabled = false,
                            UserName = "user9@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "9",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "e4aa1fa9-ac88-4127-b291-558fd027bac6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19542ebd-0724-4017-99a2-4628934b070e",
                            Email = "user10@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "user10@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEIjeVlA2vQqVRil1vXYr+5TmjVI3yIX8dzxPfiY3ir2KnYObRvygtyJLDmnu84GkDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c977e07d-cfbd-4ccf-a3ed-ebc2e8e168c0",
                            TwoFactorEnabled = false,
                            UserName = "user10@studentmail.oru.se",
                            FirstName = "user",
                            IsDeleted = false,
                            LastName = "10",
                            Subscriber = false
                        });
                });

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.HasOne("CommunicationApp.Models.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryPerson", b =>
                {
                    b.HasOne("CommunicationApp.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryAccessListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunicationApp.Models.BlogPost", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CommunicationApp.Models.Category", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", "Creator")
                        .WithMany("CategoryCreations")
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CommunicationApp.Models.Comment", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId");

                    b.HasOne("CommunicationApp.Models.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId");

                    b.Navigation("Author");

                    b.Navigation("BlogPost");
                });

            modelBuilder.Entity("CommunicationApp.Models.FileUpload", b =>
                {
                    b.HasOne("CommunicationApp.Models.BlogPost", null)
                        .WithMany("Files")
                        .HasForeignKey("BlogPostId");
                });

            modelBuilder.Entity("CommunicationApp.Models.Meeting", b =>
                {
                    b.HasOne("CommunicationApp.Models.MeetingDate", "FinalDate")
                        .WithMany()
                        .HasForeignKey("FinalDateId");

                    b.HasOne("CommunicationApp.Models.Person", "Host")
                        .WithMany("HostMeetings")
                        .HasForeignKey("HostId");

                    b.Navigation("FinalDate");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("CommunicationApp.Models.MeetingDate", b =>
                {
                    b.HasOne("CommunicationApp.Models.Meeting", null)
                        .WithMany("DateRequests")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("MeetingDatePerson", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("AttendeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.MeetingDate", null)
                        .WithMany()
                        .HasForeignKey("MeetingDateRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingPerson", b =>
                {
                    b.HasOne("CommunicationApp.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("MeetingRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("RecipientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingPerson1", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("NonAttendersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("NotAttendingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunicationApp.Models.BlogPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("CommunicationApp.Models.Meeting", b =>
                {
                    b.Navigation("DateRequests");
                });

            modelBuilder.Entity("CommunicationApp.Models.Person", b =>
                {
                    b.Navigation("CategoryCreations");

                    b.Navigation("Comments");

                    b.Navigation("HostMeetings");
                });
#pragma warning restore 612, 618
        }
    }
}
