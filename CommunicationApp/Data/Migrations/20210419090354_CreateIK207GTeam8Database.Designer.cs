// <auto-generated />
using System;
using CommunicationApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunicationApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210419090354_CreateIK207GTeam8Database")]
    partial class CreateIK207GTeam8Database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.Property<Guid>("BlogPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogPostsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BlogPostCategory");
                });

            modelBuilder.Entity("CategoryPerson", b =>
                {
                    b.Property<Guid>("CategoryAccessListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryAccessListId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("CategoryPerson");
                });

            modelBuilder.Entity("CommunicationApp.Models.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BlogType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("CommunicationApp.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CommunicationApp.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogPostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CommunicationApp.Models.FileUpload", b =>
                {
                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("BlogPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Url");

                    b.HasIndex("BlogPostId");

                    b.ToTable("FileUpload");
                });

            modelBuilder.Entity("CommunicationApp.Models.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FinalDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FinalDateId");

                    b.HasIndex("HostId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("CommunicationApp.Models.MeetingDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingDates");
                });

            modelBuilder.Entity("MeetingDatePerson", b =>
                {
                    b.Property<string>("AttendeesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MeetingDateRequestsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttendeesId", "MeetingDateRequestsId");

                    b.HasIndex("MeetingDateRequestsId");

                    b.ToTable("MeetingDatePerson");
                });

            modelBuilder.Entity("MeetingPerson", b =>
                {
                    b.Property<Guid>("MeetingRequestsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MeetingRequestsId", "RecipientsId");

                    b.HasIndex("RecipientsId");

                    b.ToTable("MeetingPerson");
                });

            modelBuilder.Entity("MeetingPerson1", b =>
                {
                    b.Property<string>("NonAttendersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("NotAttendingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NonAttendersId", "NotAttendingId");

                    b.HasIndex("NotAttendingId");

                    b.ToTable("MeetingPerson1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CommunicationApp.Models.Person", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Subscriber")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Person");

                    b.HasData(
                        new
                        {
                            Id = "75fb1e30-ec0e-4753-a98d-8c085c707660",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6db9afb2-4de3-4d57-bfd3-1d0362620f2e",
                            Email = "jonarh191@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JONARH191@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAENlx0QBJSmHjnhtB4Hxkc3kRRTJo1uOJpXi+G6G1EMqtKd24vxIngyjSbXfszZlucQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81b6b55b-6428-412d-bd5e-96bccec5de74",
                            TwoFactorEnabled = false,
                            UserName = "jonarh191@studentmail.oru.se",
                            FirstName = "Jonas",
                            IsDeleted = false,
                            LastName = "Askool",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "9020a578-d3c2-4fd0-afce-fde55067f68e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5015ce8-6611-4116-80b2-ce29fc070893",
                            Email = "aleweh201@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ALEWEH201@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAECUP4XhzRPbfOqgp1mHZtsNx+d2klR+mEwUAnoTyDcy4syg/WPPp+qTeoX2wB5deyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4ea5564-dfe1-4673-ab18-8e17248cf681",
                            TwoFactorEnabled = false,
                            UserName = "aleweh201@studentmail.oru.se",
                            FirstName = "Alexander",
                            IsDeleted = false,
                            LastName = "Wedis",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "313f91fb-5e4a-4f50-92de-6481fa87a47b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8849edd-c92a-428f-94b1-1352d578b481",
                            Email = "marjah201@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MARJAH201@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEKOUsAv07JbXJrg2Nfyo0Aq0hvhaJmDYRkhoGGpPYdr9mjKTexZJfF3gywoxp1Gp0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25fe4595-f3d6-4988-98f5-088dbd592b99",
                            TwoFactorEnabled = false,
                            UserName = "marjah201@studentmail.oru.se",
                            FirstName = "Maria",
                            IsDeleted = false,
                            LastName = "Järven",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "85c0b660-8a76-4ff3-ad13-1c078ab48093",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c2f983d-a4f9-4769-ba27-6c1bbd7a77cc",
                            Email = "selgah191@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "SELGAH191@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEGhKDQClIrzQ7GV26yAQ8H85+NGri8y4UbCTYcZDHQ3sWlL4inmW3JT2UPJyo1kKFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e215a957-515f-41cb-98f5-afef4cca7df9",
                            TwoFactorEnabled = false,
                            UserName = "selgah191@studentmail.oru.se",
                            FirstName = "Selda",
                            IsDeleted = false,
                            LastName = "Gransson",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "6ed40ddb-0e60-4acd-b646-b68a0c7a8c79",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "362f6226-db7a-4712-ae9f-a857aefaaa18",
                            Email = "matstv192@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MATSTV192@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAELKJVRdD6irX8H14e/oRVtC3jQGwZyPTfvB+JekZt57ADtAs3NharFVcLBnIgS1sTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cc2f642-856f-4084-ba82-5eec20062db1",
                            TwoFactorEnabled = false,
                            UserName = "matstv192@studentmail.oru.se",
                            FirstName = "Mattias",
                            IsDeleted = false,
                            LastName = "Stugan",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "4552d1f7-1993-4c58-abac-5115e9626d72",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f939f1d-bc61-4e74-a9b2-8c821ea17fde",
                            Email = "nikleh191@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "NIKLEH191@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAELAgJON7XyjY1EsKuglQcKGL5z6DzZ/g4qlh2lJmQNv5xMB21ZbbMXtslrnyL2Y2iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3cf1a8b-b6b3-419e-8bc1-400574727698",
                            TwoFactorEnabled = false,
                            UserName = "nikleh191@studentmail.oru.se",
                            FirstName = "Niklas",
                            IsDeleted = false,
                            LastName = "Lensson",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "742eac75-a7fe-4e4d-bce1-5b3f1b865167",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f835a7c4-747d-4c5b-b41f-d3ec141c227d",
                            Email = "robweh191@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ROBWEH191@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ/bCF0vkxm52GVeIZwWDOS3LobdOGtCS7f/axwdepk2mTFTtc8qEGFxLJGJ8UAuBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eca0e17d-f4dc-4109-bb10-b7229eab1d27",
                            TwoFactorEnabled = false,
                            UserName = "robweh191@studentmail.oru.se",
                            FirstName = "Robin",
                            IsDeleted = false,
                            LastName = "Wedlung",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "8c8ce09e-f3bd-4ceb-9a4a-cc3b1f5be925",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae45d04f-72d6-45de-a4c5-f5a35d14d518",
                            Email = "karcav191@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "KARCAV191@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEB83Z1ovAZnrRpI558u7d+q9vVcgQ4KLxd1CoJTGZAz2ji1/RFcJjWPSxCA7ts3J9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01c52292-c944-4c7e-8248-c798b1175466",
                            TwoFactorEnabled = false,
                            UserName = "karcav191@studentmail.oru.se",
                            FirstName = "Esther",
                            IsDeleted = false,
                            LastName = "Carldotter",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "7f97da13-97a7-4046-945e-f13fbe2fef19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3090b25-60de-4a37-80e5-586c0ed5141f",
                            Email = "hushah171@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "HUSHAH171@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAENhvTDDxQQmwmBkGJRuY0J7OeNr6zlGVyCCloSy6BnxOkBW34BfXW4IA14YM5P5TLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00863ca9-7827-44ca-8e4a-dcfb7c6dc97e",
                            TwoFactorEnabled = false,
                            UserName = "hushah171@studentmail.oru.se",
                            FirstName = "Adam",
                            IsDeleted = false,
                            LastName = "Hansson",
                            Subscriber = false
                        },
                        new
                        {
                            Id = "27a4c2a8-5f28-493b-9ede-beeefa96286b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5fcbb9ea-954f-42e3-8386-e6d2df66ade0",
                            Email = "evakhv191@studentmail.oru.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "EVAKHV191@STUDENTMAIL.ORU.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEE9CajS4QWMQ1yLvZSyPtf8iYadFLjijqksg4imREM8/oLrQDUdU2KUevPQp3xKnYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38c69be8-227b-4157-bfeb-d2357c89aa8d",
                            TwoFactorEnabled = false,
                            UserName = "evakhv191@studentmail.oru.se",
                            FirstName = "Evan",
                            IsDeleted = false,
                            LastName = "Kharlsson",
                            Subscriber = false
                        });
                });

            modelBuilder.Entity("BlogPostCategory", b =>
                {
                    b.HasOne("CommunicationApp.Models.BlogPost", null)
                        .WithMany()
                        .HasForeignKey("BlogPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryPerson", b =>
                {
                    b.HasOne("CommunicationApp.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryAccessListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunicationApp.Models.BlogPost", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CommunicationApp.Models.Category", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", "Creator")
                        .WithMany("CategoryCreations")
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CommunicationApp.Models.Comment", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId");

                    b.HasOne("CommunicationApp.Models.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId");

                    b.Navigation("Author");

                    b.Navigation("BlogPost");
                });

            modelBuilder.Entity("CommunicationApp.Models.FileUpload", b =>
                {
                    b.HasOne("CommunicationApp.Models.BlogPost", null)
                        .WithMany("Files")
                        .HasForeignKey("BlogPostId");
                });

            modelBuilder.Entity("CommunicationApp.Models.Meeting", b =>
                {
                    b.HasOne("CommunicationApp.Models.MeetingDate", "FinalDate")
                        .WithMany()
                        .HasForeignKey("FinalDateId");

                    b.HasOne("CommunicationApp.Models.Person", "Host")
                        .WithMany("HostMeetings")
                        .HasForeignKey("HostId");

                    b.Navigation("FinalDate");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("CommunicationApp.Models.MeetingDate", b =>
                {
                    b.HasOne("CommunicationApp.Models.Meeting", null)
                        .WithMany("DateRequests")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("MeetingDatePerson", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("AttendeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.MeetingDate", null)
                        .WithMany()
                        .HasForeignKey("MeetingDateRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingPerson", b =>
                {
                    b.HasOne("CommunicationApp.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("MeetingRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("RecipientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingPerson1", b =>
                {
                    b.HasOne("CommunicationApp.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("NonAttendersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommunicationApp.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("NotAttendingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunicationApp.Models.BlogPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("CommunicationApp.Models.Meeting", b =>
                {
                    b.Navigation("DateRequests");
                });

            modelBuilder.Entity("CommunicationApp.Models.Person", b =>
                {
                    b.Navigation("CategoryCreations");

                    b.Navigation("Comments");

                    b.Navigation("HostMeetings");
                });
#pragma warning restore 612, 618
        }
    }
}
